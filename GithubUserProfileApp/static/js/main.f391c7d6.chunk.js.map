{"version":3,"sources":["components/SearchBar/Searchbar.js","components/Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","searchUser","useState","search","setSearch","className","type","placeholder","value","onChange","e","target","aria-hidden","onClick","Profile","user","repos","loading","error","src","avatar_url","alt","name","followers","following","public_repos","bio","map","repo","key","id","href","html_url","description","App","setUser","setRepos","setLoading","setError","userTerm","fetch","then","res","json","userData","repos_url","reposData","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f391c7d6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport './Searchbar.css';\r\n\r\nconst Searchbar = ({ searchUser }) => {\r\n\r\n    const [ search, setSearch ] = useState('');\r\n\r\n    const handleSearchinput = (e) => {\r\n        const { value } = e.target;\r\n\r\n        if ( value ) {\r\n            setSearch(value);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='searchbar'>\r\n            <h1>Github Profile</h1>\r\n            <div className='search-container'>\r\n                <input type=\"text\" className='searchInput' placeholder=\"Search Github User\" value={search} onChange={handleSearchinput}  />\r\n                <i className=\"fa fa-search\" aria-hidden=\"true\" onClick={() => searchUser(search)}></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\r\nimport './Profile.css';\r\n//IMPORTS\r\n\r\nconst Profile = ({user, repos, loading, error}) => {\r\n\r\n  if (user === null && !loading) {\r\n    return (\r\n      <div className='no-user-info-container'>\r\n        <h1>No GitHub User information Searched!</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className='no-user-info-container'>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className='no-user-info-container'>\r\n        <h1>{error}</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <div className='profile'>\r\n        <img src={user.avatar_url} className='user-pic' alt=\"A user's profile\" />\r\n        <div className='profile-info'>\r\n            <h1>{user.name}</h1>\r\n            <p className='job-title'>Software Developer</p>\r\n            <div className='stats'>\r\n                <div className='stat'>\r\n                    <i className=\"fa fa-eye\" aria-hidden=\"true\"></i>\r\n                    <span>{user.followers}</span>\r\n                </div>\r\n                <div className='stat'>\r\n                    <i className=\"fa fa-heart\" aria-hidden=\"true\"></i>\r\n                    <span>{user.following}</span>\r\n                </div>\r\n                <div className='stat'>\r\n                    <i className=\"fa fa-tasks\" aria-hidden=\"true\"></i>\r\n                    <span>{user.public_repos}</span>\r\n                </div>\r\n            </div>\r\n            <p className='description'>{user.bio}</p>\r\n            \r\n        </div>\r\n      </div>\r\n      <div className='more'>\r\n        <h1>Repos</h1>\r\n        <ul>\r\n            \r\n            {\r\n              repos.map(repo => (\r\n                <li key={repo.id}>\r\n                  <a href={repo.html_url}>\r\n                      <p className='repoTitle'>{repo.name}</p>\r\n                      <p className='repoDesc'>{repo.description ? repo.description : 'No Description'}</p>\r\n                  </a>\r\n              </li>\r\n              ))\r\n            }\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useState } from 'react';\nimport './App.css';\n\n//COMPONENTS IMPORTS\nimport Searchbar from './components/SearchBar/Searchbar';\nimport Profile from './components/Profile/Profile';\n\nconst githubURL = 'https://api.github.com/users';\n\nconst App = () => {\n\n  const [ user, setUser ] = useState(null);\n\n  const [ repos, setRepos ] = useState([]);\n\n  const [ loading, setLoading ] = useState(false);\n\n  const [ error, setError ] = useState(null);\n  \n  const searchUser = (userTerm) => {\n\n    setLoading(true);\n\n    fetch(`${githubURL}/${userTerm}`)\n    .then(res => res.json())\n    .then(userData => {\n\n      setUser(userData);\n\n      fetch(userData.repos_url)\n      .then(res => res.json())\n      .then(reposData => {\n\n        setRepos(reposData);\n        setLoading(false);\n\n      })\n      .catch(err => { setError('Github user not found or something went wrong!'); console.log(err); setLoading(false);});\n\n    })\n    .catch(err => { setError('Github user\\'s repos not found or something went wrong!'); console.log(err); setLoading(false);});\n\n  }\n\n  return (\n    <div className=\"App\">\n      <Searchbar searchUser={searchUser}/>\n      <Profile user={user} repos={repos} loading={loading} error={error} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}